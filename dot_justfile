import ".just/starship.just"

# Compiles all GSettings XML schema files to gschemas.compiled
compile-gsettings-schemas:
  #!/usr/bin/env bash
  set -euxo pipefail

  # Change directory to schemas
  pushd "$HOME/.local/share/glib-2.0/schemas" || exit 1 &> /dev/null

  # Compile schemas.
  glib-compile-schemas .

  # Restore original directory
  popd || exit &> /dev/null

# Configures settings for desktop background
configure-desktop-background:
  gsettings set org.gnome.desktop.background color-shading-type 'solid'
  gsettings set org.gnome.desktop.background picture-options 'zoom'
  gsettings set org.gnome.desktop.background primary-color '#3071AE'
  gsettings set org.gnome.desktop.background secondary-color '#000000'

# Configures settings for desktop interface
configure-desktop-interface:
  gsettings set org.gnome.desktop.interface clock-show-weekday 'true'
  gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
  gsettings set org.gnome.desktop.interface show-battery-percentage 'true'
  gsettings set org.gnome.desktop.interface toolkit-accessibility 'false'
  gsettings set org.gnome.desktop.a11y.applications screen-keyboard-enabled false

# Configures settings for desktop notifications
configure-desktop-notifications:
  gsettings set org.gnome.desktop.notifications application-children "['org-gnome-software', 'org-gnome-terminal', 'org-gnome-extensions-desktop', 'org-gnome-evolution-alarm-notify', 'org-gnome-nautilus', 'code', 'gnome-power-panel', 'gnome-network-panel', 'firefox', 'gnome-printers-panel', 'com-spotify-client']"
  gsettings set org.gnome.desktop.notifications show-in-lock-screen 'false'

# Configure settings for GNOME extensions
configure-gnome-extensions:
  gsettings set com.ftpix.transparentbar transparency '0'
  gsettings set org.gnome.shell.extensions.alphabetical-app-grid show-favourite-apps 'true'
  gsettings set org.gnome.shell.extensions.blur-my-shell.panel blur 'false'
  gsettings set org.gnome.shell.extensions.dash-to-dock apply-custom-theme 'true'
  gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'previews'
  gsettings set org.gnome.shell.extensions.dash-to-dock show-apps-at-top 'true'
  # gsettings set org.gnome.shell.extensions.openweather position-in-panel 'right'
  # gsettings set org.gnome.shell.extensions.openweather pressure-unit 'bar'
  # gsettings set org.gnome.shell.extensions.openweather unit 'fahrenheit'
  # gsettings set org.gnome.shell.extensions.openweather wind-speed-unit 'mph'
  gsettings set org.gnome.shell.extensions.quick-settings-tweaks output-show-selected 'true'

# Configure settings for GNOME shell
configure-gnome-shell:
  gsettings set org.gnome.shell favorite-apps "['org.mozilla.firefox.desktop', 'com.brave.Browser.desktop', 'org.gnome.Terminal.desktop', 'org.gnome.Nautilus.desktop', 'code.desktop', 'com.spotify.Client.desktop', 'com.valvesoftware.Steam.desktop', 'com.discordapp.Discord.desktop', 'tutanota-desktop.desktop', 'bitwarden.desktop']"
  gsettings set org.gnome.shell.app-switcher current-workspace-only 'true'
  gsettings set org.gnome.shell.weather automatic-location 'false'

# Configures keyboard bindings
# configure-keybindings:
#   gsettings set org.gnome.desktop.wm.keybindings show-desktop "['<Super>d']"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/', 'org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/']"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding "<Primary><Alt>t"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command "gnome-terminal"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name "Open Terminal"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ binding "<Super>e"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ command "nautilus --new-window"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/ name "Open File Explorer"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ binding "<Shift><Control>Escape"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ command "gnome-system-monitor"
#   gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/ name "Open System Monitor"

# Configures settings for Nautilus
configure-nautilus:
  gsettings set org.gnome.nautilus.preferences default-folder-viewer 'list-view'
  gsettings set org.gnome.nautilus.preferences migrated-gtk-settings 'true'
  gsettings set org.gtk.Settings.FileChooser sort-directories-first 'true'

# Configures settings for power
configure-power-settings:
  gsettings set org.gnome.settings-daemon.plugins.power power-button-action 'interactive'
  gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout '7200'
  gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'suspend'
  gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout '900'

# Configures settings for privacy
configure-privacy-settings:
  gsettings set org.gnome.desktop.privacy disable-camera 'true'
  gsettings set org.gnome.desktop.privacy old-files-age 'uint32 30'
  gsettings set org.gnome.desktop.privacy recent-files-max-age '-1'
  gsettings set org.gnome.desktop.privacy remember-recent-files 'false'
  gsettings set org.gnome.system.location enabled 'false'

# Configures settings for touchpad
configure-touchpad:
  gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click 'true'
  gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled 'true'

# Configures settings for window manager
configure-windowmanager:
  gsettings set org.gnome.desktop.wm.preferences button-layout 'appmenu:minimize,maximize,close'

download-appimage-github $org $repo $destination:
  #!/usr/bin/env bash

  set -euo pipefail

  RELEASE_URL=https://api.github.com/repos/$org/$repo/releases/latest
  APPIMAGE_URL=$(curl -sL $RELEASE_URL | jq -r '.assets[] | select(.name|test("AppImage$")).browser_download_url')
  curl -sL $APPIMAGE_URL -o $destination 

install-appimage-desktop $appimage:
  #!/usr/bin/env bash

  set -euo pipefail

  # Extract AppImage to local directory
  pushd ~/.local/bin &> /dev/null
  $appimage --appimage-extract

  # Install desktop entry
  cp squashfs-root/*.desktop ~/.local/share/applications/

  # Install icons
  rsync -a squashfs-root/usr/share/icons/ ~/.local/share/icons/
  if [ "$appimage" == "MediaElch.AppImage" ]; then
    cp squashfs-root/MediaElch.png $HOME/.local/share/icons/
  fi

  # Remove squashfs-root directory
  rm -rf squashfs-root

  # Return to original directory
  popd &> /dev/null
   

# Installs a specified GNOME extension
install-gnome-extension uuid:
  #!/usr/bin/env bash
  
  set -euxo pipefail

  EXTENSION_DIR="$HOME/.local/share/gnome-shell/extensions"
  GNOME_SHELL_VERSION=$(gnome-shell --version | cut --delimiter=' ' --fields=3 | \
    cut --delimiter='.' --fields=1)

  # Install extension
  extension_version=$(curl -Lfs "https://extensions.gnome.org/extension-query/?search={{ uuid }}" | \
    jq --arg jq_build "{{ uuid }}" '.extensions[] | select(.uuid == $jq_build) | .shell_version_map."'"$GNOME_SHELL_VERSION"'".pk')
  if [ -n "$extension_version" ]; then
    if [ ! -d ".gnome-extensions" ]; then
      mkdir .gnome-extensions
    fi

    curl -SsL "https://extensions.gnome.org/download-extension/{{ uuid }}.shell-extension.zip?version_tag=$extension_version" -o ".gnome-extensions/{{ uuid }}.zip"
    if [ ! -d "$EXTENSION_DIR" ]; then
      mkdir -p "$EXTENSION_DIR/{{ uuid }}"
    fi
    unzip -o ".gnome-extensions/{{ uuid }}.zip" -d "$EXTENSION_DIR/{{ uuid }}"

    # Compile GSettings schemas 
    if [ -f $EXTENSION_DIR/{{ uuid }}/schemas/*.xml ]; then
      extension_xml_file=$EXTENSION_DIR/{{ uuid }}/schemas/*.xml

      # Get schema for extension from metadata.json
      settings_schema=$(jq -r '."settings-schema"' "$EXTENSION_DIR/{{ uuid }}/metadata.json")

      # If necessary, create schemas directory for glib-2.0.
      glib_schemas_dir="$HOME/.local/share/glib-2.0/schemas"
      if [ ! -d "$glib_schemas_dir" ]; then
        mkdir -p "$glib_schemas_dir"
      fi

      # Copy extension_xml_file to glib_schemas_dir
      cp $extension_xml_file "$glib_schemas_dir"

    fi
  fi

# Installs all GNOME extensions
install-gnome-extensions:
  #!/usr/bin/env bash

  set -euxo pipefail

  shopt -s expand_aliases
  if [ -f "$HOME/.bash_aliases" ]; then
    . $HOME/.bash_aliases
  fi

  just install-gnome-extension add-username-toppanel@brendaw.com
  just install-gnome-extension AlphabeticalAppGrid@stuarthayhurst
  just install-gnome-extension appindicatorsupport@rgcjonas.gmail.com
  just install-gnome-extension blur-my-shell@aunetx
  just install-gnome-extension dash-to-dock@micxgx.gmail.com
  just install-gnome-extension Move_Clock@rmy.pobox.com
  just install-gnome-extension no-overview@fthx
  # just install-gnome-extension openweather-extension@jenslody.de
  just install-gnome-extension quick-settings-tweaks@qwreey
  just install-gnome-extension transparent-top-bar@ftpix.com
  just compile-gsettings-schemas
  just configure-gnome-extensions

install-toolboxes:
  #!/usr/bin/env bash

  set -euox pipefail

  # Enable toolbox-install.service
  systemctl --user daemon-reload
  systemctl --user enable toolbox-install.service

  # Read .toolboxes file into an array
  TOOLBOXES=()
  if [ -f $HOME/.toolboxes ]; then
    readarray -t TOOLBOXES < <(cat $HOME/.toolboxes)
  else
    echo "Unable to locate $HOME/.toolboxes file."
    exit 1
  fi

  if [ -n "${TOOLBOXES[*]}" ]; then
    for TOOLBOX in ${TOOLBOXES[@]}; do
      # Destroy existing toolbox
      if podman container exists $TOOLBOX; then
        toolbox rm --force ${TOOLBOX##*/}
      fi

      # Pull latest images
      podman pull -q $TOOLBOX

      # Create toolboxes
      toolbox create -y -i $TOOLBOX
    done
  fi

# Install additional Windows software
[windows]
install-winget-pkgs:
  just install-winget-package '7zip.7zip'
  just install-winget-package 'Brave.Brave'
  just install-winget-package 'Citrix.Workspace.LTSR'
  just install-winget-package 'JohnMacFarlane.Pandoc'
  just install-winget-package 'Mattermost.MattermostDesktop'
  just install-winget-package 'Microsoft.Office'
  just install-winget-package 'Microsoft.VisualStudioCode'
  just install-winget-package 'MHNexus.HxD'
  just install-winget-package 'Mozilla.Firefox'
  just install-winget-package 'NoMoreFood.PuTTY-CAC'
  just install-winget-package 'Spotify.Spotify'
  just install-winget-package 'TheDocumentFoundation.LibreOffice'
  just install-winget-package 'VideoLAN.VLC'

# Sets up PC with desired settings
[linux]
setup:
  #!/usr/bin/env bash

  set -euxo pipefail

  shopt -s expand_aliases
  if [ -f "$HOME/.bash_aliases" ]; then
    . $HOME/.bash_aliases
  fi

  just install-gnome-extensions
  just configure-desktop-background
  just configure-desktop-interface
  just configure-desktop-notifications
  # just configure-keybindings
  just configure-nautilus
  just configure-power-settings
  just configure-privacy-settings
  just configure-touchpad
  just configure-windowmanager
  just configure-gnome-shell
  just install-toolboxes

# You can add your own commands here! For documentation, see: https://ublue.it/guide/just/
import "/usr/share/ublue-os/justfile"
